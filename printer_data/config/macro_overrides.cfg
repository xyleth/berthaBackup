[gcode_macro _CONDITIONAL_MOVE_TO_PURGE_BUCKET]
description: Move over the purge bucket
gcode:
    {% set Z_DROP = params.Z_DROP|default(1)|int %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES"].purge_and_brush_enabled %}
    {% set purgeclean_servo_enabled = printer["gcode_macro _USER_VARIABLES"].purgeclean_servo_enabled %}
    {% set Px, Py, Pz = printer["gcode_macro _USER_VARIABLES"].purge_bucket_xyz|map('float') %}

    # Move to purge zone only if it's available, else just purge where the toolhead is
    {% if purge_and_brush_enabled %}
        SAVE_GCODE_STATE NAME=CONDITIONAL_MOVE_TO_PURGE_BUCKET_STATE
        G90

        {% if Z_DROP == 1 %}
            {% if purgeclean_servo_enabled %}
                G1 Z{Pz} F{Sz} # Secure the Z before deploying the servo
                _SERVO_DEPLOY ITEM="purge"
            {% endif %}
            # Lift the Z axis to avoid the brush while travelling
            G1 Z10 F{Sz}
            G1 X{Px} Y{Py} F{St}
            G1 Z{Pz} F{Sz}
        {% else %}
            # If Z_DROP=0 there is probably some parts on the bed: we do not move the
            # Z axis and purge from an higher position. Also it's risky to use the
            # servo, so better to not do it here...
            G1 X{Px} Y{Py} F{St}
        {% endif %}

        RESTORE_GCODE_STATE NAME=CONDITIONAL_MOVE_TO_PURGE_BUCKET_STATE
    {% endif %}

# Backup macro
[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh $0"
timeout: 90.0
verbose: True

# Override the Start Print Macro
[gcode_macro START_PRINT]
description: Machine heatup procedure before starting a print
variable_bed_temp: 0
variable_extruder_temp: 0
variable_z_adjust: 0
variable_soak: 0
variable_chamber_temp: 0
variable_chamber_maxtime: 0
variable_initial_tool: 0
variable_check_gates: 0
variable_tools_used: ""
variable_sync_mmu_extruder: 0
variable_material: "XXX"
variable_fl_size: "0_0_0_0"
variable_bed_mesh_profile: ""
variable_total_layer: 0
variable_adaptive_primeline: 1
gcode:
    # Get all the parameters passed from the slicer
    {% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_bed_temp)|float %} # Bed temperature
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %} # Extruder temperature
    {% set Z_ADJUST = params.Z_ADJUST|default(0)|float %}  # Optionnal Z adjustement from the slicer profile (ex. use it if you have textured vs smooth slicer profiles) 
    {% set SOAK = params.SOAK|default(printer["gcode_macro _USER_VARIABLES"].print_default_soak)|int %} # Heatsoak time of the bed in minutes
    {% set CHAMBER_TEMP = params.CHAMBER|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_temp)|int %} # Chamber temperature setpoint
    {% set CHAMBER_MAXTIME = params.CHAMBER_MAXTIME|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_max_heating_time)|int %} # Chamber heatsoak timeout in minutes
    {% set INITIAL_TOOL = params.INITIAL_TOOL|default(0)|int %} # Initial tool (for the MMU/ERCF initialization)
    {% set MATERIAL = params.MATERIAL|default(printer["gcode_macro _USER_VARIABLES"].print_default_material)|string %} # Material type set in the slicer
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %} # Get bounding box of the first layer for the adaptive bed mesh
    {% set CHECK_GATES = params.CHECK_GATES|default(printer['gcode_macro _USER_VARIABLES'].mmu_check_gates_on_start_print)|default(0)|int %} # Check if MMU gates are availables
    {% set TOOLS_USED = params.TOOLS_USED|default("")|string %} # Check if MMU gates (used in gcode file) are availables
    {% set SYNC_MMU_EXTRUDER = params.SYNC_MMU_EXTRUDER|default(0)|int %} # set MMU gear motor and extruder synchronization during print TODO
    {% set BED_MESH_PROFILE = params.MESH|default("")|string %} # Bed mesh profile to load
    {% set ADAPTIVE_PRIMELINE = params.ADAPTIVE_PRIMELINE|default(1)|int %} # Weither to do or not an adaptive prime line near the real print zone

    # Set the variables to be used in all the modules based on the slicer parameters
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_temp VALUE={BED_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=soak VALUE={SOAK}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_temp VALUE={CHAMBER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_maxtime VALUE={CHAMBER_MAXTIME}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=initial_tool VALUE={INITIAL_TOOL}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=check_gates VALUE={CHECK_GATES}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=tools_used VALUE='"{TOOLS_USED}"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=sync_mmu_extruder VALUE={SYNC_MMU_EXTRUDER}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=material VALUE='"{MATERIAL}"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=fl_size VALUE='"{FL_SIZE}"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_mesh_profile VALUE='"{BED_MESH_PROFILE}"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=adaptive_primeline VALUE={ADAPTIVE_PRIMELINE}
    
    {% if params.TOTAL_LAYER %} # total layers count (if provided by the slicer)
        SET_PRINT_STATS_INFO TOTAL_LAYER={params.TOTAL_LAYER|int}
        SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=total_layer VALUE={params.TOTAL_LAYER|int}
    {% endif %}

    # Get all the config options and configurations for this macro
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set light_enabled = printer["gcode_macro _USER_VARIABLES"].light_enabled %}
    {% set light_intensity_start_print = printer["gcode_macro _USER_VARIABLES"].light_intensity_start_print %}
    {% set light_intensity_printing = printer["gcode_macro _USER_VARIABLES"].light_intensity_printing %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set force_homing_in_start_print = printer["gcode_macro _USER_VARIABLES"].force_homing_in_start_print %}
    {% set klippain_mmu_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_mmu_enabled %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set firmware_retraction_enabled = printer["gcode_macro _USER_VARIABLES"].firmware_retraction_enabled %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}
    {% set part_fan_tach_enabled = printer["gcode_macro _USER_VARIABLES"].part_fan_tach_enabled %}
    {% set hotend_fan_tach_enabled = printer["gcode_macro _USER_VARIABLES"].hotend_fan_tach_enabled %}

    {% if MATERIAL not in printer["gcode_macro _USER_VARIABLES"].material_parameters %}
        RESPOND MSG="Material '{MATERIAL}' is unknown!"
        { action_raise_error("Add this new material to your material_parameters variable!") }
    {% else %}
        RESPOND MSG="Material '{MATERIAL}' is used"
        {% set material = printer["gcode_macro _USER_VARIABLES"].material_parameters[MATERIAL] %}
    {% endif %}


    # --------------------------------
    # Let's do the START_PRINT actions
    # --------------------------------
    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="BUSY"
    {% endif %}

    {% if light_enabled %}
        LIGHT_ON S={light_intensity_start_print}
    {% endif %}

    CLEAR_PAUSE

    {% if bed_mesh_enabled %}
        BED_MESH_CLEAR
    {% endif %}

    # If a filter is enabled and already running due to a print that just finished, we stop
    # it now and deactivate the pending delayed gcode that could be running. The filter
    # could be restarted later in the START_PRINT sequence depending of the parameters
    {% if filter_enabled %}
        UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION=0
        STOP_FILTER
    {% endif %}

    # If a tachometer is enabled on one of the fans, we check them:
    #   - It's done only once for the part fan to be sure nothing block it before starting the print
    #   - And as a safety feature, we start a monitoring loop for the hotend fan (that is automatically stopped at the end of a print)
    {% if part_fan_tach_enabled %}
        M106 S255
        G4 P2000
        _PART_FAN_CHECK
        M106 S0
    {% endif %}
    {% if hotend_fan_tach_enabled %}
        UPDATE_DELAYED_GCODE ID=_BACKGROUND_HOTEND_TACHO_CHECK DURATION=1
    {% endif %}

    SET_GCODE_OFFSET Z=0
    M221 S100
    M220 S100
    G90
    M83

    # Material parameters
    {% if firmware_retraction_enabled %}
        SET_RETRACTION RETRACT_LENGTH={material.retract_length} RETRACT_SPEED={material.retract_speed} UNRETRACT_EXTRA_LENGTH={material.unretract_extra_length} UNRETRACT_SPEED={material.unretract_speed}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={material.pressure_advance}
    
    # Load cartographer model from material parameters
    # CARTOGRAPHER_MODEL_SELECT NAME={material.cartographer_model}

    # Load Skew correction profile
    SKEW_PROFILE LOAD={material.skew_profile}

    # Homing before START_PRINT movements and actions
    {% if force_homing_in_start_print %}
        G28
    {% else %}
        _CG28
    {% endif %}

    # If an MMU is enabled, initialize it for the print
    {% if klippain_mmu_enabled %}
        _KLIPPAIN_MMU_INIT
    {% endif %}

    # Here is the core of the START_PRINT were we get the startprint_actions variable
    # to do the procedure in the correct order for the configured probe (or user custom override)
    {% set sp_actions = printer["gcode_macro _USER_VARIABLES"].startprint_actions %}
    {% for action in sp_actions %}
        {% if action == "bed_soak" %}
            _MODULE_HEATSOAK_BED
        {% elif action == "chamber_soak" %}
            _MODULE_HEATSOAK_CHAMBER
        {% elif action == "tilt_calib" %}
            _MODULE_TILTING
        {% elif action == "extruder_heating" %}
            _MODULE_EXTRUDER_HEATING
        {% elif action == "purge" %}
            _MODULE_PURGE
        {% elif action == "clean" %}
            _MODULE_CLEAN
        {% elif action == "z_offset" %}
            _MODULE_Z_CALIB
        {% elif action == "bedmesh" %}
            _MODULE_BED_MESH
        {% elif action == "primeline" %}
            _MODULE_PRIMELINE
        {% elif action == "extruder_preheating" %}
            _MODULE_EXTRUDER_PREHEATING
        {% elif action == "custom1" %}
            _MODULE_CUSTOM1 {rawparams}
        {% elif action == "custom2" %}
            _MODULE_CUSTOM2 {rawparams}
        {% elif action == "custom3" %}
            _MODULE_CUSTOM3 {rawparams}
        {% else %}
            { action_raise_error("Unknown module called in START_PRINT! Please verify your startprint_actions variable override!") }
        {% endif %}
    {% endfor %}

    # Fine adjustement of z offset (from the slicer profile). This is used to do a custom adjustement
    # when using textured/smooth PEI sheets, or for a special material from the slicer, etc...
    SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1

    # Final material parameters
    SET_GCODE_OFFSET Z_ADJUST={material.additional_z_offset} MOVE=1
    {% if filter_enabled %}
        START_FILTER SPEED={material.filter_speed / 100}
    {% endif %}

    {% if filament_sensor_enabled and not material.filament_sensor %}
        SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=0
    {% endif %}

    # And.... Goooo!
    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="PRINTING"
    {% endif %}

    {% if light_enabled %}
        LIGHT_ON S={light_intensity_printing}
    {% endif %}

    {% if klippain_mmu_enabled %}
        {% if printer.mmu.enabled and printer.mmu.print_start_detection|int == 0 %}
            _MMU_PRINT_START
        {% endif %}
    {% endif %}

    {% if verbose %}
        RESPOND MSG="Start printing !"
    {% endif %}

    G92 E0.0

[gcode_macro END_PRINT]
description: Stop the print and filter the atmosphere for 10min before shuting down
gcode:
    {% set disable_motors_in_end_print = printer["gcode_macro _USER_VARIABLES"].disable_motors_in_end_print %}
    {% set turn_off_heaters_in_end_print = printer["gcode_macro _USER_VARIABLES"].turn_off_heaters_in_end_print %}
    {% set safe_extruder_temp = printer["gcode_macro _USER_VARIABLES"].safe_extruder_temp|float %}
    {% set light_intensity_end_print = printer["gcode_macro _USER_VARIABLES"].light_intensity_end_print %}
    {% set klippain_mmu_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_mmu_enabled %}
    {% set mmu_unload = params.MMU_UNLOAD_AT_END|default(printer["gcode_macro _USER_VARIABLES"].mmu_unload_on_end_print)|default(0)|int %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}
    {% set light_enabled = printer["gcode_macro _USER_VARIABLES"].light_enabled %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set filter_default_time = printer["gcode_macro _USER_VARIABLES"].filter_default_time_on_end_print|default(600)|int %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}
    {% set hotend_fan_tach_enabled = printer["gcode_macro _USER_VARIABLES"].hotend_fan_tach_enabled %}

    PARK

    {% if klippain_mmu_enabled %}
        {% if printer.mmu.enabled and mmu_unload %}
            # unload filament and park into MMU. Or just unload filament out of extruder if using bypass.
            MMU_EJECT
        {% endif %}
    {% elif printer.extruder.can_extrude %}
        # pull back the filament a little bit
        G92 E0
        G1 E-10 F2100
    {% endif %}

    {% if turn_off_heaters_in_end_print %}
        TURN_OFF_HEATERS
    {% else %}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={safe_extruder_temp}
    {% endif %}

    {% if hotend_fan_tach_enabled %}
        UPDATE_DELAYED_GCODE ID=_BACKGROUND_HOTEND_TACHO_CHECK DURATION=0
    {% endif %}

    M107
    M400

    {% if bed_mesh_enabled %}
        BED_MESH_CLEAR
    {% endif %}

    # Unload Skew profile
    SET_SKEW CLEAR=1
    
    {% if disable_motors_in_end_print %}
        M84
    {% endif %}


    # If a filter is connected, and used during the print, continue filtering the air
    # for a couple of min before stopping everything
    {% if filter_enabled %}
        {% if printer['fan_generic filter'].speed > 0 %}
            {% set FILTER_TIME = params.FILTER_TIME|default(filter_default_time)|int %}
            START_FILTER SPEED=1
            UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION={FILTER_TIME}
        {% endif %}
    {% endif %}

    {% if light_enabled %}
        LIGHT_ON S={light_intensity_end_print}
    {% endif %}
    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="DONE_PRINTING"
    {% endif %}

    {% if klippain_mmu_enabled %}
        {% if printer.mmu.enabled and printer.mmu.print_start_detection|int == 0 %}
            _MMU_PRINT_END
        {% endif %}
    {% endif %}

    # If a filament sensor is connected, re-enable it in case it was disabled during printing
    {% if filament_sensor_enabled %}
        SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=1
    {% endif %}

# Override the unload filament macro to eject the spool from spoolman
[gcode_macro UNLOAD_FILAMENT]
description: Basic unload of the filament (used with M600/CHANGE_FILAMENT)
gcode:
    {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %}
    {% set DISTANCE = params.DISTANCE|default(105)|float %}

    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}
    {% set klippain_mmu_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_mmu_enabled %}
    {% set re_enable_filament_sensor = 0 %}

    {% if filament_sensor_enabled %}
        {% if (printer['filament_motion_sensor runout_sensor'] is defined and printer['filament_motion_sensor runout_sensor'].enabled) or (printer['filament_switch_sensor runout_sensor'] is defined and printer['filament_switch_sensor runout_sensor'].enabled) %}
            SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=0
            {% set re_enable_filament_sensor = 1 %}
            {% if verbose %}
                RESPOND MSG="Runout sensor deactivated to unload filament"
            {% endif %}
        {% endif %}
    {% endif %}

    {% if klippain_mmu_enabled %}
        _KLIPPAIN_MMU_SET_CLOGDETECTION STATE=0
    {% endif %}

    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state
    _LOW_TEMP_CHECK T={TEMP}

    _TIP_SHAPING
    M83
    G1 E-20 F3600
    G4 P3000
    G1 E{DISTANCE|float * -1} F3000
    # Unload the active spool from Spoolman
    {% if variable_spoolman_enabled %}
      CLEAR_ACTIVE_SPOOL
    {% endif %}

    # Flushing Klipper's buffer to ensure the unload is done before continuing
    M400

    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state

    {% if filament_sensor_enabled and re_enable_filament_sensor %}
        SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=1
        {% if verbose %}
            RESPOND MSG="Filament unloaded, runout sensor reactivated"
        {% endif %}
    {% endif %}

    {% if klippain_mmu_enabled %}
        _KLIPPAIN_MMU_SET_CLOGDETECTION STATE={printer.mmu.clog_detection}
    {% endif %}